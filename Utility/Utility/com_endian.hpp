/**
* @file com_endian.hpp
*
* @author Hourui (liquidmonkey)
**/

#ifndef __COM_ENDIAN_HPP__
#define __COM_ENDIAN_HPP__

#include <cstdint>

namespace Utility
{
///////////////////////////////////////////////////////////////////////////////////////////////////
namespace com
{
///////////////////////////////////////////////////////////////////////////////////////////////////
inline void int16_endian(const void* src, void* dst) {
	*(std::int16_t*)dst = (((*(std::int16_t*)src) & 0xFF) << 8) | (((*(std::int16_t*)src) & 0xFF00) >> 8);
}
///////////////////////////////////////////////////////////////////////////////////////////////////
inline void int32_endian(const void* src, void* dst) {
	*(std::int32_t*)dst = 
		(((*(std::int32_t*)src) & 0x000000FF) << 24)|
		(((*(std::int32_t*)src) & 0x0000FF00) << 8) |
		(((*(std::int32_t*)src) & 0x00FF0000) >> 8) |
		(((*(std::int32_t*)src) & 0xFF000000) >> 24);
}
///////////////////////////////////////////////////////////////////////////////////////////////////
inline void int64_endian(const void* src, void* dst) {
	*(std::int64_t*)dst =
		(((*(std::int64_t*)src) & 0x00000000000000FF) << 56) |
		(((*(std::int64_t*)src) & 0x000000000000FF00) << 40) |
		(((*(std::int64_t*)src) & 0x0000000000FF0000) << 24) |
		(((*(std::int64_t*)src) & 0x00000000FF000000) << 8) |
		(((*(std::int64_t*)src) & 0x000000FF00000000) >> 8) |
		(((*(std::int64_t*)src) & 0x0000FF0000000000) >> 24) |
		(((*(std::int64_t*)src) & 0x00FF000000000000) >> 40) |
		(((*(std::int64_t*)src) & 0xFF00000000000000) >> 56);
}
///////////////////////////////////////////////////////////////////////////////////////////////////
}// namespace com 
///////////////////////////////////////////////////////////////////////////////////////////////////
}// namespace Utility
#endif //__COM_ENDIAN_HPP__

