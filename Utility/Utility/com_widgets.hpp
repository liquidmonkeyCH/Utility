/**
* @file com_widgets.hpp
*
* @author Hourui (liquidmonkey)
**/

#ifndef __COM_WIDGETS_HPP__
#define __COM_WIDGETS_HPP__

#include <functional>

namespace Utility
{
////////////////////////////////////////////////////////////////////////////////
namespace com
{
////////////////////////////////////////////////////////////////////////////////
namespace __impl
{
////////////////////////////////////////////////////////////////////////////////
template<class T>
class future
{
public:
	future(T& data) :m_data(data){}

	template<class M>
	inline T set(M&& value) { T m_temp = m_data; m_data = value; return std::move(m_temp); }
private:
	T&	m_data;
};
////////////////////////////////////////////////////////////////////////////////
}//namespace __impl
////////////////////////////////////////////////////////////////////////////////
template<class T>
__impl::future<T> future(T& data) { return std::move(__impl::future<T>(data)); }
////////////////////////////////////////////////////////////////////////////////
}// namespace com 
////////////////////////////////////////////////////////////////////////////////
}// namespace Utility
#endif //__COM_WIDGETS_HPP__
